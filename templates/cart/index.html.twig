{% extends 'base.html.twig' %}

{% block title %}Panier{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css">
    <link rel="stylesheet" href="{{ asset('build/navbar.css') }}">
    <link rel="stylesheet" href="{{ asset('build/main.css') }}">
    <link rel="stylesheet" href="{{ asset('build/footer.css') }}">
    <link rel="stylesheet" href="{{ asset('build/cart.css') }}">
{% endblock %}

{% block body %}
    {% include 'components/_navbar.html.twig' %}

    <div class="container page-wrapper mt-4">
        {% for message in app.flashes('success') %}
            <div class="alert alert-success">{{ message }}</div>
        {% endfor %}
        
        {% for message in app.flashes('error') %}
            <div class="alert alert-danger">{{ message }}</div>
        {% endfor %}

        <div class="row">
            <div class="col-md-8">
                <h3>Cart</h3>
                <div id="cart-items-container">
                    <!-- JS will render items here -->
                </div>
            </div>

            <div class="col-md-4">
                <div class="summary-box">
                    <h5>Order summary</h5>
                    <div class="d-flex justify-content-between">
                        <span>Subtotal</span><span id="subtotal-amount">$0.00</span>
                    </div>
                    <div class="d-flex justify-content-between">
                        <span>Discount</span><span id="discount-amount">$0.00</span>
                    </div>
                    <div class="d-flex justify-content-between">
                        <span>Shipping</span><span>Free</span>
                    </div>
                    <div class="d-flex justify-content-between fw-bold">
                        <span>Total</span><span id="total-amount">$0.00</span>
                    </div>
                    
                    <form method="post" id="checkout-form">
                        <input type="hidden" name="cart_data" id="cart-data-input">
                        <div class="mt-3 text-center">
                            <button type="button" class="checkout-btn" data-bs-toggle="modal" data-bs-target="#confirmationModal">
                                Proceed to checkout
                            </button>
                        </div>
                    </form>
                    
                    <hr>
                    <p class="text-center mb-0">Estimated delivery by August 6</p>
                </div>

                <div class="coupon-box mt-3">
                    <p><strong>Have a coupon code?</strong></p>
                    <div class="d-flex">
                        <input type="text" class="form-control me-2" placeholder="Code here">
                        <button class="apply-btn">Apply</button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    {% include 'components/_footer.html.twig' %}

    <!-- Confirmation Modal -->
    <div class="modal fade" id="confirmationModal" tabindex="-1" aria-labelledby="confirmationModalLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="confirmationModalLabel">Confirm Order</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <p>Are you certain of your order?</p>
                    <div id="order-summary">
                        <!-- Order summary will be populated by JavaScript -->
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-primary" id="confirmOrderBtn">Confirm Order</button>
                </div>
            </div>
        </div>
    </div>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css" rel="stylesheet">

    <script>
    document.addEventListener('DOMContentLoaded', () => {
        let cart = JSON.parse(localStorage.getItem('cart')) || [];
        const cartContainer = document.getElementById('cart-items-container');
        const subtotalEl = document.getElementById('subtotal-amount');
        const discountEl = document.getElementById('discount-amount');
        const totalEl = document.getElementById('total-amount');
        const cartDataInput = document.getElementById('cart-data-input');
        const checkoutForm = document.getElementById('checkout-form');

        // Check if order was successful and clear cart
        const urlParams = new URLSearchParams(window.location.search);
        if (urlParams.get('order_success') === '1') {
            cart = [];
            localStorage.setItem('cart', JSON.stringify(cart));
        }

        function renderCart() {
            cartContainer.innerHTML = '';
            if (cart.length === 0) {
                cartContainer.innerHTML = '<p>Your cart is empty.</p>';
                subtotalEl.textContent = '$0.00';
                discountEl.textContent = '$0.00';
                totalEl.textContent = '$0.00';
                return;
            }

            cart.forEach((item, index) => {
                const itemDiv = document.createElement('div');
                itemDiv.className = 'cart-item d-flex align-items-center justify-content-between mb-3';
                itemDiv.innerHTML = `
                    <div class="d-flex align-items-center gap-3">
                        <div class="item-image">
                            <img src="${item.image}" alt="${item.title}" style=" width: 80px; height: 83px; object-fit: cover; border-radius: 6px;" />
                        </div>
                        <div>
                            <strong>${item.title}</strong><br>
                            <small>${item.description || ''}</small><br>
                            <span>${(item.price * item.quantity).toFixed(2)} â‚¬</span>
                        </div>
                    </div>
                    <div class="d-flex align-items-center gap-2 item-controls">
                        <button class="btn btn-light increase" data-index="${index}">+</button>
                        <span>${item.quantity}</span>
                        <button class="btn btn-light decrease" data-index="${index}">-</button>
                        <i class="bi bi-trash trash-icon text-danger" data-index="${index}" style="cursor:pointer;"></i>
                    </div>
                `;
                cartContainer.appendChild(itemDiv);
            });


            updateSummary();
        }

        function updateSummary() {
            const subtotal = cart.reduce((sum, item) => sum + item.price * item.quantity, 0);
            const discount = 0;
            const total = subtotal - discount;

            subtotalEl.textContent = `$${subtotal.toFixed(2)}`;
            discountEl.textContent = `$${discount.toFixed(2)}`;
            totalEl.textContent = `$${total.toFixed(2)}`;
            
            // Update hidden input with cart data
            cartDataInput.value = JSON.stringify(cart);
        }

        function saveCart() {
            localStorage.setItem('cart', JSON.stringify(cart));
            renderCart();
        }

        // Handle cart item controls
        cartContainer.addEventListener('click', e => {
            const index = e.target.dataset.index;
            if (e.target.classList.contains('increase')) {
                cart[index].quantity += 1;
                saveCart();
            } else if (e.target.classList.contains('decrease')) {
                if (cart[index].quantity > 1) {
                    cart[index].quantity -= 1;
                } else {
                    cart.splice(index, 1);
                }
                saveCart();
            } else if (e.target.classList.contains('trash-icon')) {
                cart.splice(index, 1);
                saveCart();
            }
        });

        // Handle coupon application
        document.querySelector('.apply-btn')?.addEventListener('click', () => {
            alert('Coupon applied! (Functionality to be implemented)');
        });

        // Handle order confirmation
        document.getElementById('confirmOrderBtn')?.addEventListener('click', function() {
            if (cart.length === 0) {
                alert('Your cart is empty!');
                return;
            }
            
            // Update cart data before submitting
            cartDataInput.value = JSON.stringify(cart);
            
            // Show loading state
            this.disabled = true;
            this.textContent = 'Processing...';
            
            // Submit the form
            checkoutForm.submit();
        });

        // Update order summary in modal when it opens
        document.getElementById('confirmationModal')?.addEventListener('show.bs.modal', function() {
            const orderSummary = document.getElementById('order-summary');
            let summaryHTML = '<ul class="list-unstyled">';
            
            cart.forEach(item => {
                summaryHTML += `<li>${item.title} x ${item.quantity} - $${(item.price * item.quantity).toFixed(2)}</li>`;
            });
            
            const total = cart.reduce((sum, item) => sum + item.price * item.quantity, 0);
            summaryHTML += `</ul><hr><strong>Total: $${total.toFixed(2)}</strong>`;
            
            orderSummary.innerHTML = summaryHTML;
        });

        // Initial render
        renderCart();
    });
    </script>
{% endblock %}