{% extends 'base.html.twig' %}

{% block title %}GiftBot 3000 - Store{% endblock %}
{% block stylesheets %}
    {{ parent() }}
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css">
    <link rel="stylesheet" href="{{ asset('build/shared.css') }}">
    <link rel="stylesheet" href="{{ asset('build/gift.css') }}">
    <link rel="stylesheet" href="{{ asset('build/navbar.css') }}">
    <link rel="stylesheet" href="{{ asset('build/footer.css') }}">
{% endblock %}

{% block body %}
{% include 'components/_navbar.html.twig' %}



    <!-- Hero Section with Carousel -->
    <section class="hero-section">
        <div class="container">
            <div class="row align-items-center">
                <div class="col-lg-6">
                    <h1 class="display-4 fw-bold mb-4">Populaire</h1>
                    <p class="lead">Découvrez nos produits les plus appréciés</p>
                </div>
                <div class="col-lg-6">
                    <div id="popularCarousel" class="carousel slide" data-bs-ride="carousel">
                        <div class="carousel-indicators">
                            <button type="button" data-bs-target="#popularCarousel" data-bs-slide-to="0" class="active"></button>
                            <button type="button" data-bs-target="#popularCarousel" data-bs-slide-to="1"></button>
                            <button type="button" data-bs-target="#popularCarousel" data-bs-slide-to="2"></button>
                        </div>
                        <div class="carousel-inner">
                            <div class="carousel-item active">
                                <div class="product-image">
                                    <img src="{{ asset('images/store/Coffret-barbe-Grand-scaled-3552640452.jpeg') }}" alt="Coffret Bien-être" class="img-fluid" />
                                </div>
                            </div>
                            <div class="carousel-item">
                                <div class="product-image">
                                    <img src="{{ asset('images/store/il_1080xN.5039975326_l7kv-3424799994.jpg') }}" alt="Mug Personnalisé" class="coffeeset" />
                                </div>
                            </div>
                            <div class="carousel-item">
                                <div class="product-image">
                                    <img src="{{ asset('images/store/pexels-photo-7497788.webp') }}" alt="vinylplayer" class="img-fluid" />
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </section>

    <div class="container">
        <!-- Search Section -->
        <div class="row justify-content-center">
            <div class="col-lg-8">
                <form class="search-container d-flex" method="get" action="{{ path('app_gifts') }}">
                    <input type="text" name="q" class="search-input" placeholder="Rechercher un produit..." value="{{ searchQuery|default('') }}">
                    <button class="search-btn" type="submit">
                        <i class="fas fa-search"></i>
                    </button>
                </form>
            </div>
        </div>

        <!-- Category Navigation -->
        <div class="category-nav">
            <nav class="nav justify-content-center">
                <a class="nav-link active" href="#" data-category="all">Tous</a>
                <a class="nav-link" href="#" data-category="homme">Homme</a>
                <a class="nav-link" href="#" data-category="femme">Femme</a>
                <a class="nav-link" href="#" data-category="enfants">Enfants</a>
                <a class="nav-link" href="#" data-category="animaux">Animaux</a>
                <a class="nav-link" href="#" data-category="accessoires">Accessoires</a>
            </nav>
        </div>

        <!-- Products Section -->
        <div class="d-flex justify-content-between align-items-center mb-4">
            <h2 class="section-title mb-0">Nos Produits</h2>
            <select class="sort-dropdown">
                <option>Trier par</option>
                <option>Prix croissant</option>
                <option>Prix décroissant</option>
            </select>
        </div>

        <div class="row" id="products-container">
            {% for gift in gifts %}
                <div class="col-lg-4 col-md-6 mb-4">
                    <div class="product-card"
                        data-product-id="{{ gift.id }}"
                        data-product-name="{{ gift.name }}"
                        data-product-price="{{ gift.price }}"
                        data-product-description="{{ gift.description }}"
                        data-product-image="{{ asset(gift.imageUrl) }}"
                        data-category="{{ gift.category|lower }}">
                        <div class="product-image">
                            <img src="{{ asset(gift.imageUrl) }}" alt="{{ gift.name }}" class="img-fluid" />
                        </div>
                        <div class="product-title">{{ gift.name }}</div>
                        <div class="product-price">{{ gift.price|number_format(2, '.', ' ') }} €</div>
                    </div>
                </div>
            {% else %}
                <div class="col-12 text-center">
                    <p>Aucun produit trouvé.</p>
                </div>
            {% endfor %}
        </div>


        
    </div>

    <!-- Product Expanded Modal -->
    <div class="modal-backdrop-custom" id="modalBackdrop"></div>
    <div class="product-expanded" id="productModal">
        <button class="btn-close-modal" id="closeModal">
            <i class="fas fa-times"></i>
        </button>
        <div class="text-center">
            <div class="product-image mb-3">
                <img id="modalImage" src="" alt="" class="img-fluid" style="max-height: 200px;" />
            </div>
            <h3 class="mb-3" id="modalTitle"></h3>
            <p class="text-muted mb-3" id="modalDescription"></p>
            <div class="mb-3">
                <span class="product-price fs-4" id="modalPrice"></span>
            </div>
            <button class="btn btn-add-cart">
                <i class="fas fa-shopping-cart me-2"></i>
                Ajouter au panier
            </button>
        </div>
    </div>

    {% include 'components/_footer.html.twig' %}
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const productCards = document.querySelectorAll('.product-card');
            const productModal = document.getElementById('productModal');
            const modalBackdrop = document.getElementById('modalBackdrop');
            const closeModal = document.getElementById('closeModal');
            const addToCartBtn = productModal.querySelector('.btn-add-cart');
            const modalImage = document.getElementById('modalImage');
            const categoryLinks = document.querySelectorAll('[data-category]');

            let currentProduct = {};

            // Product card click handler
            productCards.forEach(card => {
                card.addEventListener('click', function() {
                    const title = this.dataset.productName;
                    const price = this.dataset.productPrice;
                    const description = this.dataset.productDescription;
                    const image = this.dataset.productImage;

                    // Update modal content
                    document.getElementById('modalTitle').textContent = title;
                    document.getElementById('modalPrice').textContent = price + ' €';
                    document.getElementById('modalDescription').textContent = description;
                    modalImage.src = image;
                    modalImage.alt = title;

                    // Store current product info for add-to-cart
                    currentProduct = {
                        title: title,
                        price: parseFloat(price),
                        description: description,
                        image: image
                    };

                    // Show modal
                    modalBackdrop.classList.add('show');
                    productModal.classList.add('show');
                    document.body.style.overflow = 'hidden';
                });
            });

            // Add to cart from modal
            addToCartBtn.addEventListener('click', function() {
                const cart = JSON.parse(localStorage.getItem('cart')) || [];
                const index = cart.findIndex(item => item.title === currentProduct.title);

                if (index >= 0) {
                    cart[index].quantity += 1;
                } else {
                    cart.push({ ...currentProduct, quantity: 1 });
                }

                localStorage.setItem('cart', JSON.stringify(cart));
                
            });

            // Close modal handlers
            function closeProductModal() {
                modalBackdrop.classList.remove('show');
                productModal.classList.remove('show');
                document.body.style.overflow = '';
            }

            closeModal.addEventListener('click', closeProductModal);
            modalBackdrop.addEventListener('click', closeProductModal);

            // Escape key to close modal
            document.addEventListener('keydown', function(e) {
                if (e.key === 'Escape') {
                    closeProductModal();
                }
            });

            // Category navigation (optional: implement filtering)
            categoryLinks.forEach(link => {
                link.addEventListener('click', function(e) {
                    e.preventDefault();
                    categoryLinks.forEach(l => l.classList.remove('active'));
                    this.classList.add('active');
                    const category = this.dataset.category;

                    document.querySelectorAll('.product-card').forEach(card => {
                        if (category === 'all' || card.dataset.category === category) {
                            card.closest('.col-lg-4').style.display = '';
                        } else {
                            card.closest('.col-lg-4').style.display = 'none';
                        }
                    });
                });
            });

            // Search functionality (optional: implement search)
            const searchInput = document.querySelector('.search-input');
            const searchBtn = document.querySelector('.search-btn');

            function performSearch() {
                const query = searchInput.value.trim();
                if (query) {
                    console.log('Searching for:', query);
                    // Implement search logic here
                }
            }

            searchBtn.addEventListener('click', performSearch);
            searchInput.addEventListener('keypress', function(e) {
                if (e.key === 'Enter') {
                    performSearch();
                }
            });

            // Sort dropdown (optional: implement sorting)
            const sortDropdown = document.querySelector('.sort-dropdown');
            const productsContainer = document.getElementById('products-container');

            sortDropdown.addEventListener('change', function() {
                const sortBy = this.value;
                // Get all product card columns as an array
                const productCols = Array.from(productsContainer.querySelectorAll('.col-lg-4, .col-md-6'));

                // Extract price from each card and sort
                productCols.sort((a, b) => {
                    const priceA = parseFloat(a.querySelector('.product-card').dataset.productPrice);
                    const priceB = parseFloat(b.querySelector('.product-card').dataset.productPrice);

                    if (sortBy === 'Prix croissant') {
                        return priceA - priceB;
                    } else if (sortBy === 'Prix décroissant') {
                        return priceB - priceA;
                    }
                    return 0; // No sorting for default
                });

                // Remove all cards and re-append in sorted order
                productCols.forEach(col => productsContainer.appendChild(col));
            });
        });
    </script>
{% endblock %}
